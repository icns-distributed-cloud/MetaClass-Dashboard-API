# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
    - name: Grant execute permission for mvnw
      run: chmod +x mvnw
    - name: Build with Maven
      run: ./mvnw -B package --file pom.xml
    - name: Temporarily save build artifact
      uses: actions/upload-artifact@v2
      with:
        name: build-artifact
        path: target
        retention-days: 1
  docker:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: build
    env:
      REPO: ${{ secrets.DOCKER_REPO }}
    steps:
    - uses: actions/checkout@v2
    - name: Retrieve built
      uses: actions/download-artifact@v2
      with:
        name: build-artifact
        path: build
    - name: Docker Hub Sign-in
      run: docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PW }}
    - name: Building Docker Image
      run: docker build -t $REPO:latest -t $REPO:${GITHUB_RUN_ID} .
    - name: Publish Docker Image
      run: docker push $REPO

    - name: SSH Remote Commands
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.PW }}
        port: ${{ secrets.PORT }}
        timeout: 60s  # 30초 기본
        script: |
             docker rm -f $(docker ps -qa)
             docker rmi ${{ secrets.DOCKER_REPO }}
             docker run -d -p 8088:8000 --name ${{ secrets.NAME }}
#           echo "Login Start . . ."
#           docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PW }}
#
#           echo "Image Download . . ."
#           docker pull ${{ secrets.DOCKER_ID }}/${{ secrets.NAME }}

#           echo "Container Stop . . ."
#           docker stop ${{ secrets.NAME }}
#            echo "Container Remove . . ."
#           docker rm ${{ secrets.NAME }}
           
             
#           docker run -d -p 8088:8000 --name ${{ secrets.NAME }} ${{ secrets.DOCKER_ID }}/${{ secrets.NAME }}
           
